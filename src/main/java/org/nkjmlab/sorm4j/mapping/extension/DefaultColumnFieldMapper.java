
package org.nkjmlab.sorm4j.mapping.extension;

import static org.nkjmlab.sorm4j.util.StringUtils.*;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import org.nkjmlab.sorm4j.mapping.Column;
import org.nkjmlab.sorm4j.mapping.FieldName;
import org.nkjmlab.sorm4j.util.StringUtils;

/**
 * Defines how a class or field name should be mapped to a table or column.
 */
public final class DefaultColumnFieldMapper implements ColumnFieldMapper {
  private static final org.slf4j.Logger log = org.nkjmlab.sorm4j.util.LoggerFactory.getLogger();


  @Override
  public List<Column> getAutoGeneratedColumns(DatabaseMetaData metaData, String tableName)
      throws SQLException {
    try (ResultSet resultSet =
        metaData.getColumns(null, getSchemaPattern(metaData), tableName, "%")) {
      final List<Column> columnsList = new ArrayList<>();
      while (resultSet.next()) {
        String columnName = resultSet.getString(4);
        String isAutoIncrement = resultSet.getString(23);
        if (isAutoIncrement.equals("YES")) {
          columnsList.add(new Column(columnName));
        }
      }
      return columnsList;
    }
  }


  @Override
  public List<Column> getColumns(DatabaseMetaData metaData, String tableName) throws SQLException {
    try (ResultSet resultSet =
        metaData.getColumns(null, getSchemaPattern(metaData), tableName, "%")) {
      final List<Column> columnsList = new ArrayList<>();
      while (resultSet.next()) {
        String columnName = resultSet.getString(4);
        int dataType = resultSet.getInt(5);
        columnsList.add(new ColumnOnTable(columnName, dataType));
      }
      return columnsList;
    }
  }


  @Override
  public List<String> getPrimaryKeys(DatabaseMetaData metaData, String tableName)
      throws SQLException {
    final List<String> primaryKeysList = new ArrayList<>();
    try (ResultSet resultSet =
        metaData.getPrimaryKeys(null, getSchemaPattern(metaData), tableName)) {
      while (resultSet.next()) {
        final String columnName = resultSet.getString(4);
        primaryKeysList.add(columnName);
      }
      return primaryKeysList;
    }
  }


  private static String getSchemaPattern(DatabaseMetaData metaData) throws SQLException {
    // oracle expects a pattern such as "%" to work
    return "Oracle".equalsIgnoreCase(metaData.getDatabaseProductName()) ? "%" : null;
  }


  /**
   * Get column name candidates based the field names.
   *
   * @param fieldNames
   * @return
   */
  @Override
  public List<Column> getColumnNameCandidates(List<FieldName> fieldNames) {
    return fieldNames.stream().flatMap(fieldName -> guessColumnNameCandidates(fieldName).stream())
        .collect(Collectors.toList());
  }

  private List<Column> guessColumnNameCandidates(FieldName fieldName) {
    return List.of(new Column(toUpperSnakeCase(fieldName.getName())),
        new Column(toUpperCase(fieldName.getName())));
  }

  /**
   * Get field name corresponding to the column name.
   *
   * @param column column name
   * @param fieldNames fieldNames exists in mapped object.
   * @return
   */
  @Override
  public Optional<FieldName> getFieldNameByColumnName(Column column, List<FieldName> fieldNames) {
    for (FieldName fieldName : fieldNames) {
      if (StringUtils.containsIgnoreCase(guessColumnNameCandidates(fieldName).stream()
          .map(s -> s.toString()).collect(Collectors.toList()), column.getName())) {
        return Optional.of(fieldName);
      }
    }
    return Optional.empty();
  }

  private static final class ColumnOnTable extends Column {

    private int dataType;

    public ColumnOnTable(String name, int dataType) {
      super(name);
      this.dataType = dataType;
    }

    @Override
    public String toString() {
      return getName() + "(" + DefaultResultSetConverter.sqlTypeToString(dataType) + ")";
    }
  }

}
