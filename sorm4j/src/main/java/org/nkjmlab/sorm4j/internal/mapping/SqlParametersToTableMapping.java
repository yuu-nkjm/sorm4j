package org.nkjmlab.sorm4j.internal.mapping;

import static java.lang.System.*;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import org.nkjmlab.sorm4j.OrmConnection;
import org.nkjmlab.sorm4j.SormException;
import org.nkjmlab.sorm4j.internal.mapping.multirow.MultiRowProcessor;
import org.nkjmlab.sorm4j.internal.sql.result.InsertResultImpl;
import org.nkjmlab.sorm4j.internal.util.ArrayUtils;
import org.nkjmlab.sorm4j.internal.util.ParameterizedStringUtils;
import org.nkjmlab.sorm4j.internal.util.Try;
import org.nkjmlab.sorm4j.mapping.ColumnToAccessorMapping;
import org.nkjmlab.sorm4j.mapping.ColumnValueToJavaObjectConverters;
import org.nkjmlab.sorm4j.mapping.MultiRowProcessorFactory;
import org.nkjmlab.sorm4j.mapping.PreparedStatementSupplier;
import org.nkjmlab.sorm4j.mapping.SqlParametersSetter;
import org.nkjmlab.sorm4j.mapping.TableSql;
import org.nkjmlab.sorm4j.result.InsertResult;
import org.nkjmlab.sorm4j.result.TableMetaData;
import org.nkjmlab.sorm4j.util.logger.LogPoint;
import org.nkjmlab.sorm4j.util.logger.LoggerContext;

/**
 * Holds mapping data from a given class and a table
 */
public final class SqlParametersToTableMapping<T> {

  private final Class<T> objectClass;
  private final ColumnValueToJavaObjectConverters columnValueConverter;
  private final ColumnToAccessorMapping columnToAccessorMap;

  private final Map<String, Class<?>> setterParameterTypeMap = new ConcurrentHashMap<>();
  private final PreparedStatementSupplier statementSupplier;
  private final SqlParametersSetter sqlParametersSetter;
  private final MultiRowProcessor<T> multiRowProcessor;

  private final TableMetaData tableMetaData;
  private final TableSql sql;
  private final LoggerContext loggerContext;

  public SqlParametersToTableMapping(LoggerContext loggerContext,
      ColumnValueToJavaObjectConverters columnValueConverter,
      SqlParametersSetter sqlParametersSetter, PreparedStatementSupplier statementSupplier,
      MultiRowProcessorFactory multiRowProcessorFactory, Class<T> objectClass,
      ColumnToAccessorMapping columnToAccessorMap, TableMetaData tableMetaData,
      TableSql sql) {
    this.columnValueConverter = columnValueConverter;
    this.objectClass = objectClass;
    this.columnToAccessorMap = columnToAccessorMap;
    this.loggerContext = loggerContext;
    this.tableMetaData = tableMetaData;
    this.sql = sql;
    this.sqlParametersSetter = sqlParametersSetter;
    this.statementSupplier = statementSupplier;
    @SuppressWarnings("unchecked")
    MultiRowProcessor<T> processor = (MultiRowProcessor<T>) multiRowProcessorFactory
        .getMultiRowProcessor(loggerContext, sqlParametersSetter, statementSupplier, this);
    this.multiRowProcessor = processor;
  }

  public int[] batch(Connection con, String sql, Function<T, Object[]> parameterCreator,
      T[] objects) {
    return this.multiRowProcessor.batch(con, sql, parameterCreator, objects);
  }

  /**
   * Updates a batch of objects in the database. The objects will be identified using their matched
   * table's primary keys. If no primary keys are defined in a given object, a RuntimeException will
   * be thrown.
   *
   */

  public int[] delete(Connection connection, @SuppressWarnings("unchecked") T... objects) {
    throwExeptionIfPrimaryKeyIsNotExist();
    return batch(connection, sql.getDeleteSql(), obj -> getDeleteParameters(obj), objects);
  }

  /**
   * Deletes an object in the database. The object will be identified using its mapped table's
   * primary key.
   *
   */
  public int delete(OrmConnection connection, T object) {
    throwExeptionIfPrimaryKeyIsNotExist();
    return connection.executeUpdate(getSql().getDeleteSql(), getDeleteParameters(object));
  }

  ColumnToAccessorMapping getColumnToAccessorMap() {
    return columnToAccessorMap;
  }

  String getColumnToAccessorString() {
    return "[" + objectClass.getName() + "] is mapped to " + columnToAccessorMap.toString();
  }

  private Object[] getDeleteParameters(T object) {
    return getParameters(object, tableMetaData.getPrimaryKeys());
  }

  public Object[] getInsertParameters(T object) {
    return getParameters(object, tableMetaData.getNotAutoGeneratedColumns());
  }

  public TableMetaData getTableMetaData() {
    return tableMetaData;
  }

  public Object[] getMergeParameters(T object) {
    return getParameters(object, tableMetaData.getNotAutoGeneratedColumns());
  }

  Class<T> getObjectClass() {
    return objectClass;
  }


  public Object[] getParameters(Object object, List<String> columns) {
    if (object == null) {
      throw new SormException(ParameterizedStringUtils.newString(
          "Fail to get value from a instance of [{}] but it is null.", getObjectClass()));
    }
    final Object[] ret = new Object[columns.size()];

    for (int i = 0; i < ret.length; i++) {
      ret[i] = getColumnToAccessorMap().getValue(object, columns.get(i));
    }
    return ret;
  }



  private Object[] getParametersWithoutAutoGeneratedColumns(T object) {
    return getParameters(object, tableMetaData.getNotAutoGeneratedColumns());
  }

  public Object[] getPrimaryKeyParameters(T object) {
    return getParameters(object, tableMetaData.getPrimaryKeys());
  }

  private Class<?> getSetterParamType(String column) {
    return setterParameterTypeMap.computeIfAbsent(column,
        k -> getColumnToAccessorMap().get(column).getSetterParameterType());
  }


  public TableSql getSql() {
    return sql;
  }

  private Object[] getUpdateParameters(T object) {
    return getParameters(object, tableMetaData.getColumnsForUpdate());
  }

  @SafeVarargs
  public final int[] insert(Connection con, T... objects) {
    return multiRowProcessor.multiRowInsert(con, objects);
  }

  public int insert(OrmConnection connection, T object) {
    return connection.executeUpdate(sql.getInsertSql(), getInsertParameters(object));
  }

  public InsertResult<T> insertAndGet(Connection connection, T object) {
    String insertSql = sql.getInsertSql();

    try (PreparedStatement stmt = !tableMetaData.hasAutoGeneratedColumns()
        ? statementSupplier.prepareStatement(connection, insertSql)
        : statementSupplier.prepareStatement(connection, insertSql,
            tableMetaData.getAutoGeneratedColumnsArray())) {
      final Object[] parameters = getInsertParameters(object);
      sqlParametersSetter.setParameters(stmt, parameters);

      Optional<LogPoint> lp = loggerContext.createLogPoint(LoggerContext.Category.EXECUTE_UPDATE,
          SqlParametersToTableMapping.class);
      lp.ifPresent(_lp -> _lp.logBeforeSql(connection, insertSql, parameters));

      int rowsModified = stmt.executeUpdate();

      lp.ifPresent(_lp -> _lp.logAfterUpdate(rowsModified));

      List<Object> keys = setAutoGeneratedKeys(stmt, object);

      return new InsertResultImpl<T>(new int[] {rowsModified}, object, keys);
    } catch (SQLException e) {
      throw Try.rethrow(e);
    }
  }

  /**
   *
   * @param con
   * @param objects not allow {@code null} or {@code 0} length
   * @return
   */
  @SafeVarargs
  public final InsertResult<T> insertAndGet(Connection con, T... objects) {
    @SuppressWarnings("unchecked")
    T[] objsWithoutLast =
        (T[]) Arrays.asList(objects).subList(0, objects.length - 1).toArray(Object[]::new);
    T last = objects[objects.length - 1];
    int[] resultWithoutLast = insert(con, objsWithoutLast);

    InsertResult<T> insertResult = insertAndGet(con, last);
    int[] result = ArrayUtils.add(resultWithoutLast, insertResult.getRowsModified()[0]);

    return new InsertResultImpl<T>(result, insertResult.getObject(),
        insertResult.getAutoGeneratedKeys());
  }



  @SuppressWarnings("unchecked")
  public int[] merge(Connection con, T... objects) {
    int[] result = multiRowProcessor.multiRowMerge(con, objects);
    return result;
  }

  public int merge(OrmConnection connection, T object) {
    return connection.executeUpdate(sql.getMergeSql(), getMergeParameters(object));
  }

  private List<Object> setAutoGeneratedKeys(PreparedStatement stmt, T object) throws SQLException {
    try (ResultSet resultSet = stmt.getGeneratedKeys()) {
      ResultSetMetaData metaData = resultSet.getMetaData();
      List<Object> ret = new ArrayList<>();
      while (resultSet.next()) {
        String columnName = metaData.getColumnName(1);
        int columnType = metaData.getColumnType(1);
        Class<?> classType = getSetterParamType(columnName);
        final Object value = columnValueConverter.convertTo(resultSet, 1, columnType, classType);
        getColumnToAccessorMap().setValue(object, columnName, value);
        ret.add(value);
      }
      return ret;
    }
  }


  @SafeVarargs
  public final void setPrametersOfMultiRow(PreparedStatement stmt, T... objects)
      throws SQLException, IOException {
    Object[] parameters = Arrays.stream(objects)
        .flatMap(obj -> Arrays.stream(getParametersWithoutAutoGeneratedColumns(obj)))
        .toArray(Object[]::new);
    sqlParametersSetter.setParameters(stmt, parameters);
  }

  private void throwExeptionIfPrimaryKeyIsNotExist() {
    if (!tableMetaData.hasPrimaryKey()) {
      throw new SormException("This opperation requiers primary keys but Table ["
          + tableMetaData.getTableName() + "] doesn't have them.");
    }
  }

  @Override
  public String toString() {
    return "[" + SqlParametersToTableMapping.class.getSimpleName() + "] Table ["
        + tableMetaData.getTableName() + "] is mapped to [" + getObjectClass().getName()
        + "] class. " + lineSeparator() + "PK=" + tableMetaData.getPrimaryKeys() + ",  "
        + tableMetaData.getColumnsWithMetaData() + lineSeparator()
        + getColumnToAccessorString() + lineSeparator() + "  with ["
        + multiRowProcessor.getClass().getSimpleName() + "]";
  }

  /**
   * Updates a batch of objects in the database. The objects will be identified using their mapped
   * table's primary keys. If no primary keys are defined in the mapped table, a
   * {@link RuntimeException} will be thrown.
   *
   */

  public int[] update(Connection connection, @SuppressWarnings("unchecked") T... objects) {
    throwExeptionIfPrimaryKeyIsNotExist();
    return batch(connection, sql.getUpdateSql(), obj -> getUpdateParameters(obj), objects);
  }

  /**
   * Updates an object in the database. The object will be identified using its mapped table's
   * primary key. If no primary keys are defined in the mapped table, a {@link RuntimeException}
   * will be thrown.
   */

  public int update(OrmConnection connection, T object) {
    throwExeptionIfPrimaryKeyIsNotExist();
    return connection.executeUpdate(getSql().getUpdateSql(), getUpdateParameters(object));
  }

}
