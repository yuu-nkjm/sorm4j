package org.nkjmlab.sorm4j.context;

import static org.junit.jupiter.api.Assertions.*;
import java.net.Inet4Address;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import org.junit.jupiter.api.Test;
import org.nkjmlab.sorm4j.Sorm;
import org.nkjmlab.sorm4j.test.common.Guest;
import org.nkjmlab.sorm4j.test.common.SormTestUtils;

class DefaultColumnValueToJavaObjectConvertersTest {

  @Test
  void testConvertTo() {
    ColumnValueToJavaObjectConverter columnValueConverter = new ColumnValueToJavaObjectConverter() {

      @Override
      public boolean test(Class<?> toType) {
        return toType.equals(String.class);
      }

      @Override
      public Object convertTo(ResultSet resultSet, int columnIndex, int columnType, Class<?> toType)
          throws SQLException {
        return resultSet.getString(columnIndex).toString();

      }

    };

    SqlParameterSetter parameterSetter = new SqlParameterSetter() {

      @Override
      public boolean test(PreparedStatement stmt, int parameterIndex, Object parameter)
          throws SQLException {
        return parameter.getClass().equals(java.net.Inet4Address.class);
      }

      @Override
      public void setParameter(PreparedStatement stmt, int parameterIndex, Object parameter)
          throws SQLException {
        stmt.setString(parameterIndex, parameter.toString());
      }
    };
    PreparedStatementSupplier supplier = new PreparedStatementSupplier() {
      @Override
      public PreparedStatement prepareStatement(Connection connection, String sql,
          String[] autoGeneratedColumnsArray) throws SQLException {
        return connection.prepareStatement(sql, autoGeneratedColumnsArray);
      }

      @Override
      public PreparedStatement prepareStatement(Connection connection, String sql)
          throws SQLException {
        return connection.prepareStatement(sql);
      }
    };
    SormContext context = SormContext.builder()
        .setColumnValueToJavaObjectConverters(
            new DefaultColumnValueToJavaObjectConverters(columnValueConverter))
        .setSqlParametersSetter(new DefaultSqlParametersSetter(parameterSetter))
        .setPreparedStatementSupplier(supplier).build();

    Sorm sorm = SormTestUtils.createSormWithNewDatabaseAndCreateTables(context);

    sorm.insert(SormTestUtils.GUEST_ALICE);
    sorm.selectAll(Guest.class);

    try {
      sorm.readFirst(Guest.class, "select * from guests where name=?", Inet4Address.getLocalHost());
    } catch (Exception e) {
      fail();
    }


  }

}
